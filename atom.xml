<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄同学的笔记小屋</title>
  
  <subtitle>web前端学习日志</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lanxiangc2.github.io/"/>
  <updated>2020-06-10T14:11:03.729Z</updated>
  <id>http://lanxiangc2.github.io/</id>
  
  <author>
    <name>黄流川</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是CI/CD</title>
    <link href="http://lanxiangc2.github.io/2020/06/10/%E4%BB%80%E4%B9%88%E6%98%AFCI-CD/"/>
    <id>http://lanxiangc2.github.io/2020/06/10/什么是CI-CD/</id>
    <published>2020-06-10T14:09:48.000Z</published>
    <updated>2020-06-10T14:11:03.729Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;参考博客：&lt;a href=&quot;https://www.jianshu.com/p/5643b1cf9e3f&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="运维" scheme="http://lanxiangc2.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="http://lanxiangc2.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="运维" scheme="http://lanxiangc2.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——性能优化</title>
    <link href="http://lanxiangc2.github.io/2020/06/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://lanxiangc2.github.io/2020/06/10/前端知识点总结——性能优化/</id>
    <published>2020-06-10T13:48:26.000Z</published>
    <updated>2020-06-10T14:15:02.852Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;谈谈性能优化的问题&quot;&gt;&lt;a href=&quot;#谈谈性能优化的问题&quot; class=&quot;headerlink&quot; title=&quot;谈谈性能优化的问题&quot;&gt;&lt;/a&gt;谈谈性能优化的问题&lt;/h3&gt;&lt;h4 id=&quot;缓存利用&quot;&gt;&lt;a href=&quot;#缓存利用&quot; class=&quot;headerlink&quot; title=&quot;缓存利用&quot;&gt;&lt;/a&gt;缓存利用&lt;/h4&gt;&lt;p&gt;缓存Ajax，使用CDN、外部JavaScript和CSS文件缓存，添加Expires头，在服务器端配置Etag，减少DNS查找等&lt;/p&gt;
&lt;h4 id=&quot;请求数量&quot;&gt;&lt;a href=&quot;#请求数量&quot; class=&quot;headerlink&quot; title=&quot;请求数量&quot;&gt;&lt;/a&gt;请求数量&lt;/h4&gt;&lt;p&gt;合并样式和脚本，使用CSS图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载&lt;/p&gt;
&lt;h4 id=&quot;请求带宽&quot;&gt;&lt;a href=&quot;#请求带宽&quot; class=&quot;headerlink&quot; title=&quot;请求带宽&quot;&gt;&lt;/a&gt;请求带宽&lt;/h4&gt;&lt;p&gt;压缩文件，开启GZIP&lt;/p&gt;
&lt;h4 id=&quot;JavaScript代码&quot;&gt;&lt;a href=&quot;#JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;JavaScript代码&quot;&gt;&lt;/a&gt;JavaScript代码&lt;/h4&gt;&lt;p&gt; 用散列表来代替优化查找，少用全局变量，用innerHTML代替DOM操作，减少DOM操作次数，优化JavaScript性能， 用setTimeout避免页面失去响应，缓存DOM节点查找结果，避免使用with（with会创建自己的作用域，增加作用域链的长度），多个变量声明合并&lt;/p&gt;
&lt;h4 id=&quot;HTML代码&quot;&gt;&lt;a href=&quot;#HTML代码&quot; class=&quot;headerlink&quot; title=&quot;HTML代码&quot;&gt;&lt;/a&gt;HTML代码&lt;/h4&gt;&lt;p&gt;避免图片和iFrame等src属性为空。src属性为空，会重新加载当前页面，影响速度和效率，尽量避免在HTML标签中写Style属性&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="性能优化" scheme="http://lanxiangc2.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——操作系统</title>
    <link href="http://lanxiangc2.github.io/2020/06/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://lanxiangc2.github.io/2020/06/10/前端知识点总结——操作系统/</id>
    <published>2020-06-10T12:46:22.000Z</published>
    <updated>2020-06-10T14:15:14.009Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进程和线程的区别&quot;&gt;&lt;a href=&quot;#进程和线程的区别&quot; class=&quot;headerlink&quot; title=&quot;进程和线程的区别&quot;&gt;&lt;/a&gt;进程和线程的区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考作者：&lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;，链接地址：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;计算机的核心是CPU&lt;/strong&gt;，它承担了所有的计算任务。它就&lt;strong&gt;像一座工厂&lt;/strong&gt;，时刻在运行。&lt;/p&gt;
&lt;p&gt;假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，&lt;u&gt;单个CPU一次只能运行一个任务&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程就好比工厂的车间&lt;/strong&gt;，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。&lt;/p&gt;
&lt;p&gt;一个车间里，可以有很多工人。他们协同完成一个任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程就好比车间里的工人&lt;/strong&gt;。一个进程可以包括多个线程。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。&lt;/u&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="操作系统" scheme="http://lanxiangc2.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——算法与数据结构</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——算法与数据结构/</id>
    <published>2020-06-09T12:21:23.000Z</published>
    <updated>2020-06-09T13:07:55.310Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;排序算法了解哪些&quot;&gt;&lt;a href=&quot;#排序算法了解哪些&quot; class=&quot;headerlink&quot; title=&quot;排序算法了解哪些&quot;&gt;&lt;/a&gt;排序算法了解哪些&lt;/h3&gt;&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;p&gt;插入排序&lt;/p&gt;
&lt;p&gt;选择排序&lt;/p&gt;
&lt;p&gt;快速排序&lt;/p&gt;
&lt;p&gt;归并排序&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="算法" scheme="http://lanxiangc2.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——JavaScript</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94JavaScript/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——JavaScript/</id>
    <published>2020-06-09T08:04:14.000Z</published>
    <updated>2020-06-10T12:17:53.380Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;apply-bind-call的区别&quot;&gt;&lt;a href=&quot;#apply-bind-call的区别&quot; class=&quot;headerlink&quot; title=&quot;apply bind call的区别&quot;&gt;&lt;/a&gt;apply bind call的区别&lt;/h3&gt;&lt;p&gt;&lt;code&gt;call 、bind 、 apply&lt;/code&gt; 这三个函数的第一个参数都是 this 的指向对象&lt;/p&gt;
&lt;p&gt;第二个参数差别来了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call的参数是直接放进去的，第二第三第n个参数全都用逗号分隔，直接放到后面  &lt;code&gt;obj.myFun.call(db,&amp;#39;成都&amp;#39;, ... ,&amp;#39;string&amp;#39; )；&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;apply的所有参数都必须放在一个数组里面传进去  &lt;code&gt;obj.myFun.apply(db,[&amp;#39;成都&amp;#39;, ..., &amp;#39;string&amp;#39; ]);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;bind除了返回是函数以外，它 的参数和call 一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/09/前端知识点总结——JavaScript/pic1.png&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj.myFun.call(db,&lt;span class=&quot;string&quot;&gt;&#39;成都&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;上海&#39;&lt;/span&gt;)；　　　　 &lt;span class=&quot;comment&quot;&gt;// 德玛 年龄 99  来自 成都去往上海&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.myFun.apply(db,[&lt;span class=&quot;string&quot;&gt;&#39;成都&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;上海&#39;&lt;/span&gt;]);      &lt;span class=&quot;comment&quot;&gt;// 德玛 年龄 99  来自 成都去往上海  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.myFun.bind(db,&lt;span class=&quot;string&quot;&gt;&#39;成都&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;上海&#39;&lt;/span&gt;)();       &lt;span class=&quot;comment&quot;&gt;// 德玛 年龄 99  来自 成都去往上海&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面经" scheme="http://lanxiangc2.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="JavaScript" scheme="http://lanxiangc2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——ES6</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94ES6/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——ES6/</id>
    <published>2020-06-09T04:56:34.000Z</published>
    <updated>2020-06-10T11:50:34.725Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对ES6有什么了解&quot;&gt;&lt;a href=&quot;#对ES6有什么了解&quot; class=&quot;headerlink&quot; title=&quot;对ES6有什么了解&quot;&gt;&lt;/a&gt;对ES6有什么了解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从以下几个方面去聊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;let和const&lt;/li&gt;
&lt;li&gt;解构赋值&lt;/li&gt;
&lt;li&gt;ES6拓展&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ES6" scheme="http://lanxiangc2.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——网络</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——网络/</id>
    <published>2020-06-09T04:40:27.000Z</published>
    <updated>2020-06-10T13:23:20.005Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对称加密和非对称加密&quot;&gt;&lt;a href=&quot;#对称加密和非对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密和非对称加密&quot;&gt;&lt;/a&gt;对称加密和非对称加密&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对称加密&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对称加密指的就是加密和解密使用同一个秘钥，所以叫做对称加密。对称加密只有一个秘钥，作为私钥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非对称加密&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非对称加密指的是：加密和解密使用不同的秘钥，一把作为公开的公钥，另一把作为私钥。公钥加密的信息，只有私钥才能解密。私钥加密的信息，只有公钥才能解密。（A、B两把钥匙是拥有一定数学关系的一组秘钥）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对称加密算法相比非对称加密算法来说，加解密的效率要高得多。但是缺陷在于对于秘钥的管理上，以及在非安全信道中通讯时，密钥交换的安全性不能保障。所以在实际的网络环境中，会将两者混合使用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面经" scheme="http://lanxiangc2.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="计算机网络" scheme="http://lanxiangc2.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——Vue</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94Vue/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——Vue/</id>
    <published>2020-06-09T02:53:53.000Z</published>
    <updated>2020-06-10T13:47:34.719Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue和react&quot;&gt;&lt;a href=&quot;#vue和react&quot; class=&quot;headerlink&quot; title=&quot;vue和react&quot;&gt;&lt;/a&gt;vue和react&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;相似之处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Virtual-DOM&quot;&gt;&lt;a href=&quot;#Virtual-DOM&quot; class=&quot;headerlink&quot; title=&quot;Virtual DOM&quot;&gt;&lt;/a&gt;Virtual DOM&lt;/h4&gt;&lt;p&gt;Vue.js(2.0版本)与React的其中最大一个相似之处，就是他们都使用了一种叫’Virtual DOM’的东西。所谓的Virtual DOM基本上说就是它名字的意思：虚拟DOM，DOM树的虚拟表现。它的诞生是基于这么一个概念：改变真实的DOM状态远比改变一个JavaScript对象的花销要大得多。&lt;/p&gt;
&lt;p&gt;Virtual DOM是一个映射真实DOM的JavaScript对象，如果需要改变任何元素的状态，那么是先在Virtual DOM上进行改变，而不是直接改变真实的DOM。当有变化产生时，一个新的Virtual DOM对象会被创建并计算新旧Virtual DOM之间的差别。之后这些差别会应用在真实的DOM上。&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端框架" scheme="http://lanxiangc2.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="面经" scheme="http://lanxiangc2.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——nodes.js</title>
    <link href="http://lanxiangc2.github.io/2020/06/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94nodejs/"/>
    <id>http://lanxiangc2.github.io/2020/06/09/前端知识点总结——nodejs/</id>
    <published>2020-06-09T01:36:57.000Z</published>
    <updated>2020-06-10T04:26:59.229Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;koa洋葱圈运行机制&quot;&gt;&lt;a href=&quot;#koa洋葱圈运行机制&quot; class=&quot;headerlink&quot; title=&quot;koa洋葱圈运行机制&quot;&gt;&lt;/a&gt;koa洋葱圈运行机制&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Koa = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Koa();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (ctx, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (ctx, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (ctx, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx.body = &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;listenning on 3000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码执行后会输出&lt;code&gt;123456&lt;/code&gt;，就像一个洋葱一样，从外层进去，然后碰到&lt;code&gt;next()&lt;/code&gt;就执行下一个中间件，执行完成后再返回回来。先假设我们已经实现了&lt;code&gt;next&lt;/code&gt;为下个中间件这段代码，上面的执行逻辑就很清楚了，先输出&lt;code&gt;1&lt;/code&gt;，然后进入下一个中间件，去处理&lt;code&gt;2&lt;/code&gt;，同理最后后面都处理完成后处理&lt;code&gt;5&lt;/code&gt;，&lt;code&gt;5&lt;/code&gt;处理完成后第二个中间件结束，然后第一个中间件再处理&lt;code&gt;6&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面经" scheme="http://lanxiangc2.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="node.js框架" scheme="http://lanxiangc2.github.io/tags/node-js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="后端" scheme="http://lanxiangc2.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端知识点总结——React</title>
    <link href="http://lanxiangc2.github.io/2020/06/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94React/"/>
    <id>http://lanxiangc2.github.io/2020/06/08/前端知识点总结——React/</id>
    <published>2020-06-08T12:41:59.000Z</published>
    <updated>2020-06-09T04:41:27.156Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端知识点总结" scheme="http://lanxiangc2.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端框架" scheme="http://lanxiangc2.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="面经" scheme="http://lanxiangc2.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="http://lanxiangc2.github.io/2020/06/08/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://lanxiangc2.github.io/2020/06/08/位运算/</id>
    <published>2020-06-08T08:26:30.000Z</published>
    <updated>2020-06-08T10:08:35.195Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;按位与运算符（-amp-）&quot;&gt;&lt;a href=&quot;#按位与运算符（-amp-）&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://lanxiangc2.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="http://lanxiangc2.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用openpyxl处理excel表格</title>
    <link href="http://lanxiangc2.github.io/2020/06/07/%E4%BD%BF%E7%94%A8openpyxl%E5%A4%84%E7%90%86excel%E8%A1%A8%E6%A0%BC/"/>
    <id>http://lanxiangc2.github.io/2020/06/07/使用openpyxl处理excel表格/</id>
    <published>2020-06-07T01:26:27.000Z</published>
    <updated>2020-06-07T02:43:09.403Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;邹同学是国贸专业的，听她说其他同学处理数据都是手动，真实骇人听闻啊，遂昨晚花了点时间研究了下，跑了个小demo，这里分享给大家，也随便记录下自己的python学习之旅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先申明笔者并不了解python，代码不规范的地方还请多多理解&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个文件夹finance_export，下边的有很多个excel表格，现在需要将excel表格不重要的信息过滤出去，然后合并到一张新表中&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python学习之旅" scheme="http://lanxiangc2.github.io/categories/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="python" scheme="http://lanxiangc2.github.io/tags/python/"/>
    
      <category term="数据处理" scheme="http://lanxiangc2.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="http://lanxiangc2.github.io/2020/06/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>http://lanxiangc2.github.io/2020/06/05/数组中的逆序对/</id>
    <published>2020-06-05T07:14:35.000Z</published>
    <updated>2020-06-05T11:14:20.350Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目描述：&lt;/strong&gt;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。
        
      
    
    </summary>
    
    
      <category term="算法" scheme="http://lanxiangc2.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>找第N个丑数</title>
    <link href="http://lanxiangc2.github.io/2020/06/05/%E6%89%BE%E7%AC%ACN%E4%B8%AA%E4%B8%91%E6%95%B0/"/>
    <id>http://lanxiangc2.github.io/2020/06/05/找第N个丑数/</id>
    <published>2020-06-05T05:35:32.000Z</published>
    <updated>2020-06-05T05:54:47.789Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目：把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://lanxiangc2.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>部署静态页面到服务器</title>
    <link href="http://lanxiangc2.github.io/2020/06/04/%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://lanxiangc2.github.io/2020/06/04/部署静态页面到服务器/</id>
    <published>2020-06-04T11:19:47.000Z</published>
    <updated>2020-06-10T02:46:01.774Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;秋招将至，一名前端小白无时不刻不在幻想如何才能在众多简历中脱颖而出&quot;&gt;&lt;a href=&quot;#秋招将至，一名前端小白无时不刻不在幻想如何才能在众多简历中脱颖而出&quot; class=&quot;headerlink&quot; title=&quot;秋招将至，一名前端小白无时不刻不在幻想如何才能在众多简历中脱颖而出&quot;&gt;&lt;/a&gt;秋招将至，一名前端小白无时不刻不在幻想如何才能在众多简历中脱颖而出&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;想说一句非科班出身的太难了，我搞了好半天才把静态页面部署到服务器上，说个题外话，买服务器的时候我还在纠结买哪个公司的，担心到时候面试官问到会很尴尬呀（哈哈，梦回高考之前在想去北大还是清华啦）。先给自己拟定一个流程图吧（emmmm，不知道能不能行呀）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/04/部署静态页面到服务器/flow.png&quot; alt=&quot;flow&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="http://lanxiangc2.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="http://lanxiangc2.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="运维" scheme="http://lanxiangc2.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树转化为双向链表</title>
    <link href="http://lanxiangc2.github.io/2020/06/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://lanxiangc2.github.io/2020/06/04/二叉搜索树转化为双向链表/</id>
    <published>2020-06-04T01:54:02.000Z</published>
    <updated>2020-06-05T05:54:39.663Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;昨天遇到一道这样的题，‘&lt;code&gt;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。&lt;/code&gt;’，想了很久才弄明白。&lt;/p&gt;
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://lanxiangc2.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="http://lanxiangc2.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速判断空数组和空对象</title>
    <link href="http://lanxiangc2.github.io/2020/06/03/%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD%E7%A9%BA%E6%95%B0%E7%BB%84%E5%92%8C%E7%A9%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>http://lanxiangc2.github.io/2020/06/03/快速判断空数组和空对象/</id>
    <published>2020-06-03T02:34:24.000Z</published>
    <updated>2020-06-03T09:03:35.799Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;判断空数组&quot;&gt;&lt;a href=&quot;#判断空数组&quot; class=&quot;headerlink&quot; title=&quot;判断空数组&quot;&gt;&lt;/a&gt;判断空数组&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="web前端" scheme="http://lanxiangc2.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="学习笔记" scheme="http://lanxiangc2.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>for循环中的变量保存</title>
    <link href="http://lanxiangc2.github.io/2019/12/27/for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E4%BF%9D%E5%AD%98/"/>
    <id>http://lanxiangc2.github.io/2019/12/27/for循环中的变量保存/</id>
    <published>2019-12-27T14:18:13.000Z</published>
    <updated>2020-06-09T04:57:39.577Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天的web前端学习打算用for循环给ul下的li标签绑定DOM0级事件，如下&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;标题1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;标题2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;标题3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for循环绑定事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = items.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	items[i].onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&lt;span class=&quot;string&quot;&gt;&#39;这是标题&#39;&lt;/span&gt; + i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上的代码不用我解释了把，想实现的效果是点击哪个标题就弹出我点击了标题几。&lt;/p&gt;
&lt;p&gt;可是问题出现了,我点击标题1，这时弹出“这是标题3”，我当时就不乐意了啊这明明就是标题1啊！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://lanxiangc2.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="问题记录" scheme="http://lanxiangc2.github.io/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>节点新增模块</title>
    <link href="http://lanxiangc2.github.io/2019/06/26/%E8%8A%82%E7%82%B9%E6%96%B0%E5%A2%9E%E6%A8%A1%E5%9D%97/"/>
    <id>http://lanxiangc2.github.io/2019/06/26/节点新增模块/</id>
    <published>2019-06-26T08:35:21.000Z</published>
    <updated>2019-07-30T06:51:02.092Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1整体介绍&quot;&gt;&lt;a href=&quot;#1整体介绍&quot; class=&quot;headerlink&quot; title=&quot;1整体介绍&quot;&gt;&lt;/a&gt;1整体介绍&lt;/h2&gt;&lt;p&gt;节点新增模块按照功能设计主要分为三个模块，对应的三个功能如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/img/SoWkIImgAStDuShBJqbLK7hHrVIyQUUpQHkUBfhtRCN2ftEdAq5bdYrkUBvbqTEk-I-Qzq9b5A1IBrjxd-zTXo85bNcoVzspAJjHPRWmxL3GrLN0D1zaV4cgGb9-IKb-ha9-6XObLY2nPrkxdyrP1N74yrajKEEdRdZPte_3Bam7erk5gS9AuVdkcH23e8Pkt_sqQm548GvxCBsFRW-c2YkOsFPDp-PqFkrl0le4OZhGRr3R75BpKe1n1W00&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://lanxiangc2.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="节点管理" scheme="http://lanxiangc2.github.io/tags/%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>web前端设计</title>
    <link href="http://lanxiangc2.github.io/2019/06/26/web%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    <id>http://lanxiangc2.github.io/2019/06/26/web前端设计/</id>
    <published>2019-06-26T08:24:48.000Z</published>
    <updated>2019-07-30T06:49:29.499Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-项目设计的整体设计框架如下&quot;&gt;&lt;a href=&quot;#1-项目设计的整体设计框架如下&quot; class=&quot;headerlink&quot; title=&quot;1 项目设计的整体设计框架如下&quot;&gt;&lt;/a&gt;1 项目设计的整体设计框架如下&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://www.gravizo.com/svg?%40startuml%3B%0Acloud%20RabbitMQ%20%7B%20%3B%0Ainterface%20stomp%3B%0Ainterface%20mq%3B%0Amq%20%3C--%3E%20stomp%3B%0A%7D%3B%0Acloud%20FileSever%3B%0Adatabase%20Mysql%20as%20sql%3B%0Acloud%20Django%20%7B%3B%0Ainterface%20%20REST%20%3B%0AREST%20%3C--%3E%20sql%3A%20Django%20ORM%3B%0AREST%20--%3E%20mq%20%3A%20new%20jobs%3B%0A%7D%3B%0ACloud%20VueJs%20%7B%3B%0Ainterface%20Webosocket%20%20as%20wb%3B%0Ainterface%20http%20%3B%0Awb%20--%3E%20http%20%3A%20update%20view%3B%0Awb%20%3C--%3E%20stomp%20%3A%20%20notifiy%20or%20realtime%20data%3B%0Ahttp%20%3C--%3E%20REST%20%3A%20request%20%26%20response%3B%0Ahttp%20--%3E%20FileSever%20%3A%20request%20pics%20and%20files%3B%0A%7D%3B%0ANode%20Node%20%7B%3B%0Ainterface%20radio1%3B%0Ainterface%20mq_clinet1%3B%0Amq_clinet1%20--%3E%20radio1%20%3A%20configure%3B%0Amq%20--%3E%20mq_clinet1%20%3A%20working%20jobs%3B%0Amq_clinet1%20--%3E%20mq%20%3A%20result%3B%0A%7D%3B%0ANode%20Node2%20%7B%3B%0Ainterface%20radio2%3B%0Ainterface%20mq_clinet2%3B%0Amq_clinet2%20--%3E%20radio2%20%3A%20configure%3B%0Amq%20--%3E%20mq_clinet2%20%3A%20working%20jobs%3B%0Amq_clinet2%20--%3E%20mq%20%3A%20result%3B%0A%7D%3B%0ANode%20Node3%20%7B%3B%0Ainterface%20radio_n%3B%0Ainterface%20mq_clinet_n%3B%0Amq_clinet_n%20--%3E%20radio_n%20%3A%20configure%3B%0Amq%20--%3E%20mq_clinet_n%20%3A%20working%20jobs%3B%0Amq_clinet_n%20--%3E%20mq%20%3A%20result%3B%0A%7D%3B%0A%0ANode%20BackGroudTaskS%20%7B%3B%0Ainterface%20url_orm%3B%0Ainterface%20mq_consumers%20as%20mc%3B%0Amc%20--%3E%20url_orm%20%3A%20pollig%20or%20writing%3B%0A%7D%3B%0Aurl_orm%20%3C--%3E%20REST%20%3A%20http%20CURD%3B%0Amc%20--%3E%20mq%20%3A%20changes%20info%3B%0Amc%20--%3E%20FileSever%3A%20%22put%20files%22%3B%0AFileSever%20--%3E%20url_orm%3A%20%22return%20static%20urls%22%3B%0A%40enduml&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://lanxiangc2.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="整体设计" scheme="http://lanxiangc2.github.io/tags/%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="主要框架和工具" scheme="http://lanxiangc2.github.io/tags/%E4%B8%BB%E8%A6%81%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
